name: Two-stage match
description: |
  This charter demonstrates how to perform a multi-stage match. Multi-stage matches can be used when
  there is more than one type of grouping possible (i.e. different fields involved in the group-by)
  and no one-single grouping will be possible for all the incoming data.

  In this example we are matching payments to invoices, but only some of the payments have a direct
  invoice Ref value - others have been populated with an internal system id for the transaction.

  So whilst we can group by the Ref column for some matches, we'll then fall-back and group by the
  invoice date to mop-up those other payments which wouldn't group by ref. Each of these is what is
  referred to as a match stage.
version: 1
debug: true

jetwash:
  source_files:
   - pattern: ^05-invoices\.csv$
     column_mappings:
      - ymd: Invoice Date
   - pattern: ^05-payments\.csv$
     column_mappings:
      - dmy: Payment Date
      - dmy: Invoice Date

matching:
  source_files:
    - pattern: .*05-invoices.*\.csv
      field_prefix: INV
    - pattern: .*05-payments.*\.csv
      field_prefix: PAY

  instructions:
    - merge:
        columns: ['INV.Ref', 'PAY.Ref']
        into: REF

    - merge:
        columns: ['INV.Amount', 'PAY.Amount']
        into: AMOUNT

    - merge:
        columns: ['INV.Invoice Date', 'PAY.Invoice Date']
        into: INVOICE_DATE

      # If you look at the example data /examples/data/05-invoices.csv and 05-payments.csv, you'll see this
      # initial group instruction will only match line 3 from the invoice file with line 3 from the payment file,
      # because the REF 'INV0002' is the same for both - whilst the remaining two payments use a different ID value
      # 'INTERNAL_1' which doesn't group with 'INV0001' in the invoice file. Leaving those records as unmatched.
    - group:
        by: ['REF']
        match_when:
          - nets_to_zero:
              column: AMOUNT
              lhs: record["META.prefix"] == "INV"
              rhs: record["META.prefix"] == "PAY"

      # This second stage group and match uses the less-precise date field to group the remaining records and
      # run a nets-to-zero constraint on those records.
    - group:
        by: ['INVOICE_DATE']
        match_when:
          - nets_to_zero:
              column: AMOUNT
              lhs: record["META.prefix"] == "INV"
              rhs: record["META.prefix"] == "PAY"
