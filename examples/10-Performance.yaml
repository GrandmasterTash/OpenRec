name: Performance
description: |
  This charter is intended to demonstrate the low resource requirements for large match jobs.
  You will have to run the generator to generate the data though and this can take 45+mins.
  Use these arguments for a fairly extreme example: -

    --invoice-columns 50 --payment-columns 50 --receipt-columns 50 --rows 1000000

  This should create around 5GB of data across 3 files. You should then rename the files to
  include the '09-BIG-' segment - this will ensure only this charter is going to use those
  files. e.g.

    20211130_041659150_invoices.csv -> 20211130_041659150_09-BIG-invoices.csv
    20211130_041659150_payments.csv -> 20211130_041659150_09-BIG-payments.csv
    20211130_041659150_receipts.csv -> 20211130_041659150_09-BIG-receipts.csv

  You should also only use a --release build of the matcher to run on these large files, debug
  builds are an order-of-magnitude slower than release builds.

  The above is a fairly extreme example, if you're impatient you can scale back the number of
  rows and/or columnes to create smaller datasets.
version: 1637208553000
file_patterns: ['.*09-BIG-invoices\.csv', '.*09-BIG-payments\.csv', '.*09-BIG-receipts\.csv']
field_aliases: ['INV', 'PAY', 'REC']
# TODO: prefix_aliases: ['INV', 'PAY', 'REC']
# Ensure debug is false - there is significant overhead when true as the matcher will be writing all
# data out to multiple files after each instruction if it's set to true.
debug: false
instructions:
  - project:
      column: PAYMENT_AMOUNT_BASE
      as_type: DECIMAL
      from: record["PAY.Amount"] * record["PAY.FXRate"]
      when: meta["prefix"] == "PAY"
  - project:
      column: RECEIPT_AMOUNT_BASE
      as_type: DECIMAL
      from: record["REC.Amount"] * record["REC.FXRate"]
      when: meta["prefix"] == "REC"
  - project:
      column: TOTAL_AMOUNT_BASE
      as_type: DECIMAL
      from: record["INV.TotalAmount"] * record["INV.FXRate"]
      when: meta["prefix"] == "INV"
  - merge_columns:
      from: ['PAYMENT_AMOUNT_BASE', 'RECEIPT_AMOUNT_BASE', 'TOTAL_AMOUNT_BASE']
      into: AMOUNT_BASE
  - merge_columns:
      from: ['INV.Reference', 'PAY.Reference', 'REC.Reference']
      into: REFERENCE
  - match_groups:
      group_by: ['REFERENCE']
      constraints:
        - nets_to_zero:
            column: AMOUNT_BASE
            lhs: meta["prefix"] == "PAY"
            rhs: meta["prefix"] == "INV"
        - nets_to_zero:
            column: AMOUNT_BASE
            lhs: meta["prefix"] == "REC"
            rhs: meta["prefix"] == "INV"
